// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/aiccfinetune.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AICCFinetune_SetAICCFinetuneInfo_FullMethodName = "/aiccfinetune.AICCFinetune/SetAICCFinetuneInfo"
)

// AICCFinetuneClient is the client API for AICCFinetune service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AICCFinetuneClient interface {
	SetAICCFinetuneInfo(ctx context.Context, in *AICCFinetuneInfo, opts ...grpc.CallOption) (*AICCFinetuneResult, error)
}

type aICCFinetuneClient struct {
	cc grpc.ClientConnInterface
}

func NewAICCFinetuneClient(cc grpc.ClientConnInterface) AICCFinetuneClient {
	return &aICCFinetuneClient{cc}
}

func (c *aICCFinetuneClient) SetAICCFinetuneInfo(ctx context.Context, in *AICCFinetuneInfo, opts ...grpc.CallOption) (*AICCFinetuneResult, error) {
	out := new(AICCFinetuneResult)
	err := c.cc.Invoke(ctx, AICCFinetune_SetAICCFinetuneInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AICCFinetuneServer is the server API for AICCFinetune service.
// All implementations must embed UnimplementedAICCFinetuneServer
// for forward compatibility
type AICCFinetuneServer interface {
	SetAICCFinetuneInfo(context.Context, *AICCFinetuneInfo) (*AICCFinetuneResult, error)
	mustEmbedUnimplementedAICCFinetuneServer()
}

// UnimplementedAICCFinetuneServer must be embedded to have forward compatible implementations.
type UnimplementedAICCFinetuneServer struct {
}

func (UnimplementedAICCFinetuneServer) SetAICCFinetuneInfo(context.Context, *AICCFinetuneInfo) (*AICCFinetuneResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAICCFinetuneInfo not implemented")
}
func (UnimplementedAICCFinetuneServer) mustEmbedUnimplementedAICCFinetuneServer() {}

// UnsafeAICCFinetuneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AICCFinetuneServer will
// result in compilation errors.
type UnsafeAICCFinetuneServer interface {
	mustEmbedUnimplementedAICCFinetuneServer()
}

func RegisterAICCFinetuneServer(s grpc.ServiceRegistrar, srv AICCFinetuneServer) {
	s.RegisterService(&AICCFinetune_ServiceDesc, srv)
}

func _AICCFinetune_SetAICCFinetuneInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AICCFinetuneInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AICCFinetuneServer).SetAICCFinetuneInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AICCFinetune_SetAICCFinetuneInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AICCFinetuneServer).SetAICCFinetuneInfo(ctx, req.(*AICCFinetuneInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// AICCFinetune_ServiceDesc is the grpc.ServiceDesc for AICCFinetune service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AICCFinetune_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aiccfinetune.AICCFinetune",
	HandlerType: (*AICCFinetuneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAICCFinetuneInfo",
			Handler:    _AICCFinetune_SetAICCFinetuneInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/aiccfinetune.proto",
}
